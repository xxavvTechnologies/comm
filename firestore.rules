rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidDocument() {
      let data = request.resource.data;
      return 
        data.keys().hasAll(['title', 'content', 'lastEdited', 'userId']) &&
        data.title is string &&
        data.content is string &&
        data.lastEdited is timestamp &&
        data.userId == request.auth.uid;
    }

    function isValidRevision() {
      let data = request.resource.data;
      return 
        data.keys().hasAll(['content', 'timestamp', 'author', 'userId']) &&
        data.content is string &&
        data.timestamp is timestamp &&
        data.author is string &&
        data.userId == request.auth.uid;
    }
    
    // Helper function for validating posts
    function isValidPost() {
      let data = request.resource.data;
      return 
        data.keys().hasAll(['content', 'userId', 'username', 'createdAt', 'likes']) &&
        data.content is string &&
        data.userId == request.auth.uid &&
        data.username is string &&
        data.createdAt is timestamp &&
        data.likes is number;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
    }
    
    function isValidComment() {
      let data = request.resource.data;
      return 
        data.keys().hasAll(['content', 'userId', 'username', 'createdAt']) &&
        data.content is string &&
        data.userId == request.auth.uid &&
        data.username is string &&
        data.createdAt is timestamp;
    }
    
    // Posts collection
    match /posts/{postId} {
      allow read: if true;
      allow write: if request.auth != null;
      
      // Allow access to likes subcollection
      match /likes/{likeId} {
        allow read: if true;
        allow write: if request.auth != null;
      }
      
      // Allow access to comments subcollection
      match /comments/{commentId} {
        allow read: if true;
        allow write: if request.auth != null;
      }
    }

    // Users collection with verification rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
      
      // Allow access to likes subcollection
      match /likes/{postId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Admin collection for managing verified status
    match /admins/{adminId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only manually through Firebase Console
    }

    // Deleted users collection (for admin record keeping)
    match /deletedUsers/{docId} {
      allow read, write: if isAdmin();
    }

    // Messages collection
    match /messages/{messageId} {
      // Allow reading messages if user is a participant in the chat
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        resource.data.chatId.split('_').hasAny([request.auth.uid])
      );

      // Allow listing/querying messages
      allow list: if isAuthenticated();
      
      // Allow creating messages if user sets themselves as sender
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid &&
                   request.resource.data.chatId.split('_').hasAny([request.auth.uid]);
      
      // Allow updating only readBy and readAt fields
      allow update: if isAuthenticated() && 
                   request.resource.data.diff(resource.data).affectedKeys()
                     .hasOnly(['readBy', 'readAt']) &&
                   resource.data.chatId.split('_').hasAny([request.auth.uid]);
      
      // Allow deleting only your own messages
      allow delete: if isAuthenticated() && 
                   resource.data.userId == request.auth.uid;
    }

    // Chats collection
    match /chats/{chatId} {
      // Allow reading chats if user is a participant
      allow read: if isAuthenticated();
      
      // Allow creating chats
      allow create: if isAuthenticated();
      
      // Allow updates to chat metadata
      allow update: if isAuthenticated();
      
      // Prevent deletion
      allow delete: if false;
    }

    // UserTokens collection for FCM
    match /userTokens/{userId} {
      allow read, write: if isOwner(userId);
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if request.auth != null && resource.data.recipientId == request.auth.uid;
      allow write: if request.auth != null;
    }
    
  // Documents collection with enhanced rules
    match /documents/{docId} {
      // Allow reading if:
      // 1. User owns the document
      // 2. Document is public
      // 3. User is authenticated and is in the sharedWith array
      allow read: if 
        // Allow if user owns the document
        (resource.data.userId == request.auth.uid) ||
        // Allow if document is public
        (resource.data.isPublic == true) ||
        // Allow if user is in sharedWith array
        (request.auth != null && 
         request.auth.uid in resource.data.sharedWith);
      
      // Only owner can create/update/delete
      // Update the write rules to ensure sharedWith only contains valid user IDs
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid &&
                   (
                     !('sharedWith' in request.resource.data) ||
                     request.resource.data.sharedWith is list
                   );
      
      allow update: if isAuthenticated() && 
                   (resource.data.userId == request.auth.uid) &&
                   (
                     // Allow toggling favorite status
                     request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isFavorite']) ||
                     // Allow moving to trash with deletion date
                     (request.resource.data.diff(resource.data).affectedKeys().hasAll(['isDeleted', 'deletedAt']) &&
                      request.resource.data.isDeleted is bool &&
                      request.resource.data.deletedAt is timestamp) ||
                     // Allow restoring from trash
                     (request.resource.data.diff(resource.data).affectedKeys().hasAll(['isDeleted', 'deletedAt']) &&
                      request.resource.data.isDeleted == false &&
                      request.resource.data.deletedAt == null) ||
                     // Allow other document updates
                     (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['sharedWith', 'userId']))
                   );

      // Add function to check if document should be auto-deleted
      function isExpiredTrashItem() {
        return resource.data.isDeleted == true &&
               resource.data.deletedAt.toMillis() + duration.value(30, 'd') < request.time.toMillis();
      }

      // Allow admin to delete expired items
      allow delete: if isAuthenticated() && 
                   (resource.data.userId == request.auth.uid || isAdmin()) &&
                   (isExpiredTrashItem() || !resource.data.isDeleted);

      // Revisions subcollection
      match /revisions/{revisionId} {
        allow read, write: if isAuthenticated() && 
                          get(/databases/$(database)/documents/documents/$(docId)).data.userId == request.auth.uid;
      }
    }

    // Document settings collection
    match /documents/{docId}/settings/{settingId} {
      allow read: if isAuthenticated() && 
                 get(/databases/$(database)/documents/documents/$(docId)).data.userId == request.auth.uid;
      
      allow write: if isAuthenticated() && 
                  get(/databases/$(database)/documents/documents/$(docId)).data.userId == request.auth.uid;
    }

    // Document backups collection
    match /documents/{docId}/backups/{backupId} {
      allow read: if isAuthenticated() && 
                 get(/databases/$(database)/documents/documents/$(docId)).data.userId == request.auth.uid;
      
      allow create: if isAuthenticated() && 
                   get(/databases/$(database)/documents/documents/$(docId)).data.userId == request.auth.uid;
      
      allow delete: if isAuthenticated() && 
                   get(/databases/$(database)/documents/documents/$(docId)).data.userId == request.auth.uid;
      
      allow update: if false; // Backups should be immutable
    }

    // Document revisions with enhanced validation
    match /documents/{docId}/revisions/{revisionId} {
      allow read: if isAuthenticated() && 
                 get(/databases/$(database)/documents/documents/$(docId)).data.userId == request.auth.uid;
      
      allow create: if isAuthenticated() && 
                   get(/databases/$(database)/documents/documents/$(docId)).data.userId == request.auth.uid &&
                   isValidRevision();
      
      allow delete: if isAuthenticated() && 
                   get(/databases/$(database)/documents/documents/$(docId)).data.userId == request.auth.uid;
                   
      allow update: if false; // Revisions should be immutable
    }

    // Document sharing rules
    match /documentShares/{shareId} {
      allow read: if isAuthenticated() &&
                 (resource.data.userId == request.auth.uid || 
                  resource.data.sharedWith == request.auth.uid);
      
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid;
      
      allow update, delete: if isAuthenticated() && 
                          resource.data.userId == request.auth.uid;
    }

    // User preferences collection
    match /userPreferences/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }

    // Document statistics collection
    match /documentStats/{docId} {
      allow read: if isAuthenticated() && 
                 get(/databases/$(database)/documents/documents/$(docId)).data.userId == request.auth.uid;
      
      allow write: if isAuthenticated() && 
                  get(/databases/$(database)/documents/documents/$(docId)).data.userId == request.auth.uid;
    }

    // Document tags collection
    match /documentTags/{tagId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid;
      
      allow update, delete: if isAuthenticated() && 
                          resource.data.userId == request.auth.uid;
    }

    // Recent documents collection
    match /recentDocuments/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }

    // Hashtags collection
    match /hashtags/{tagId} {
      allow read: if true;
      allow create, update: if isAuthenticated() &&
          request.resource.data.keys().hasAll(['count', 'lastUsed']) &&
          request.resource.data.count is number;
      allow delete: if false;
    }

    // Notes collection rules
    match /notes/{noteId} {
      allow read: if 
        (resource.data.userId == request.auth.uid) ||
        (resource.data.isPublic == true);
      
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid;
      
      allow update: if isAuthenticated() && 
                   resource.data.userId == request.auth.uid &&
                   request.resource.data.userId == request.auth.uid;
      
      allow delete: if isAuthenticated() && 
                   resource.data.userId == request.auth.uid;
    }

    // Add typing collection rules
    match /typing/{chatId} {
      allow read, write: if isAuthenticated() && 
        chatId.split('_').hasAny([request.auth.uid]);
    }

    // Update messages collection rules to be more permissive for queries
    match /messages/{messageId} {
      allow read, list: if isAuthenticated();
      
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid;
      
      allow update: if isAuthenticated() && 
                   (resource.data.chatId.split('_').hasAny([request.auth.uid]));
      
      allow delete: if isAuthenticated() && 
                   resource.data.userId == request.auth.uid;
    }

    // Groups collection
    match /groups/{groupId} {
      // Allow reading if user is a member
      allow read: if isAuthenticated() && 
                 (resource.data.members.hasAny([request.auth.uid]));
      
      // Allow creating if user sets themselves as creator and member
      allow create: if isAuthenticated() && 
                   request.resource.data.creator == request.auth.uid &&
                   request.resource.data.members.hasAny([request.auth.uid]);
      
      // Allow updates if user is creator or adding/removing themselves as member
      allow update: if isAuthenticated() && 
                   (
                     resource.data.creator == request.auth.uid || 
                     (
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) &&
                       (
                         request.resource.data.members.removeAll(resource.data.members).hasOnly([request.auth.uid]) ||
                         resource.data.members.removeAll(request.resource.data.members).hasOnly([request.auth.uid])
                       )
                     )
                   );
      
      // Only creator can delete
      allow delete: if isAuthenticated() && 
                   resource.data.creator == request.auth.uid;
    }

    // Update messages rules to support group messages
    match /messages/{messageId} {
      allow read, list: if isAuthenticated() && (
        resource.data.chatId.split('_').hasAny([request.auth.uid]) ||
        (
          resource.data.chatId.hasAll(['group_']) && 
          get(/databases/$(database)/documents/groups/$(resource.data.chatId)).data.members.hasAny([request.auth.uid])
        )
      );
      
    }

    // Reports collection
    match /reports/{reportId} {
      // Helper function to validate report data
      function isValidReport() {
        let data = request.resource.data;
        return data.keys().hasAll(['type', 'details', 'reportedBy', 'status', 'createdAt']) &&
               data.type in ['user', 'message', 'other'] &&
               data.details is string &&
               data.reportedBy == request.auth.uid &&
               data.status == 'pending' &&
               data.createdAt is timestamp &&
               (!('reportedUser' in data) || data.reportedUser is string);
      }

      allow read: if isAuthenticated() && 
                  (resource.data.reportedBy == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() && isValidReport();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Support tickets collection
    match /supportTickets/{ticketId} {
      allow create: if isAuthenticated();
      allow read: if request.auth.uid == resource.data.userId || isAdmin();
    }

    // Feedback collection
    match /feedback/{feedbackId} {
      allow create: if isAuthenticated();
      allow read: if true;
      allow update: if isAdmin();
    }

    // FAQs collection
    match /faqs/{faqId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Warnings collection
    match /warnings/{warningId} {
      allow read: if isAuthenticated() && 
                 (resource.data.userId == request.auth.uid || isAdmin());
      allow create, update, delete: if isAdmin();
    }
  }
}